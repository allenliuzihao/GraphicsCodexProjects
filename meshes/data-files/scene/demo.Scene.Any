// -*- c++ -*-
{
    name = "Demo Scene";

    models = {
       cubeModel = ArticulatedModel::Specification {
            filename = "model/cube.off";
            preprocess = {
                setMaterial(all(), Color3(0, 0.7, 0.7));
            };
       };

       cylinderModel = ArticulatedModel::Specification {
            filename = "model/cylinder.off";
            preprocess = {
                setMaterial(all(), Color3(0.3, 0.6, 0.1));
            };
       };

       heightFieldModel = ArticulatedModel::Specification {
            filename = "model/heightfield.zip/heightfield.off";
            preprocess = {
                setMaterial(all(), Color3(0.7, 0.7, 0.2));
            };
       };
       
       glassModel = ArticulatedModel::Specification {
            filename = "model/glass.off";
            preprocess = {
                setMaterial(all(), 
            		UniversalMaterial::Specification {
                	lambertian = Color3(0.02);
                	glossy = Color4(Color3(0.3), 0.8);
                	transmissive = Color3(0.9, 1.0, 1.0);
                	emissive = Color3(0.01);
                	etaReflect = 1.0;
                	etaTransmit = 1.03;
        	});
            };
       };
    };

    entities = {
       skybox = Skybox {
            texture = "cubemap/whiteroom/whiteroom-*.png";
       };

       sun = Light {
            bulbPower = Power3(2e6,1.7e6,1.4e6);
            shadowMapBias = 0.01;
            track = lookAt(Point3(-90, 200, 40), Point3(0, 0, 0));
            shadowMapSize = Vector2int16(4096, 4096);
            shadowMapBias = 0.02;
            spotHalfAngleDegrees = 7;
            type = "SPOT";
       };

        cube0 = VisibleEntity {
            model = "cubeModel";
            frame = CFrame::fromXYZYPRDegrees(0, 0, 0, 0, 0, 0);
        };

        cylinder0 = VisibleEntity {
            model = "cylinderModel";
            frame = CFrame::fromXYZYPRDegrees(0, 0, 0, 0, 0, 0);
        };
	
	heightfield0 = VisibleEntity {
            model = "heightFieldModel";
            frame = CFrame::fromXYZYPRDegrees(0, 0, 0, 0, 0, 0);
        };

	glass0 = VisibleEntity {
            model = "glassModel";
            frame = CFrame::fromXYZYPRDegrees(0, 0, 0, 0, 0, 0);
        };

        camera = Camera {
            frame = CFrame::fromXYZYPRDegrees(0, 0, 5);
        };
    };
};